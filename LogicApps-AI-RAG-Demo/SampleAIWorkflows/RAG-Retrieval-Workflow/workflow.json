{
  "definition": {
    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
    "actions": {
      "system_message": {
        "type": "Compose",
        "inputs": "You are an intelligent assistant helping employees generate sales and marketing insights based on the sales data for music albums provided to you through sales report. Use the sales data provides to you and offer detailed insights and actionable recommendations for improving the music album sales. Also answer questions on the sales of albums based on genre or artist name. Use 'you' to refer to the individual asking the questions even if they ask with 'I'. Answer the following question using only the data provided in the sources below. Each source has a name followed by colon and the actual information, always include the source name for each fact you use in the response. If you cannot answer using the sources below, say you don't know. Generate well formatted response in HTML that can be read easily in an email or chat",
        "runAfter": {}
      },
      "sample_responses": {
        "type": "Compose",
        "inputs": [
          {
            "message": "How were the sales in North America?",
            "role": "user"
          },
          {
            "message": "How were the overall sales in all regions",
            "role": "assistant"
          },
          {
            "message": "Generate sales insights from this data to share with leadership",
            "role": "user"
          },
          {
            "message": "Sales report for pop music",
            "role": "assistant"
          }
        ],
        "runAfter": {
          "system_message": [
            "SUCCEEDED"
          ]
        }
      },
      "system_message_for_search_query": {
        "type": "Compose",
        "inputs": "Below is a history of the conversation so far, and a new question asked by the user that needs to be answered by searching in the sales data of music albums globally.\nYou have access to Azure Cognitive Search index with 100's of documents.\nGenerate a search query based on the question.\nDo not include cited source filenames and document names e.g info.txt or doc.pdf in the search query terms.\nDo not include any text inside [] or <<>> in the search query terms.\nDo not include any special characters like '+'.\nIf the question is not in English, translate the question to English before generating the search query.\nIf you cannot generate a search query, return just the number 0",
        "runAfter": {
          "sample_responses": [
            "SUCCEEDED"
          ]
        }
      },
      "Execute_JavaScript_Code": {
        "type": "JavaScriptCode",
        "inputs": {
          "code": "var system_message=workflowContext.actions.system_message_for_search_query.outputs;\r\nvar samples=workflowContext.actions.sample_responses.outputs\r\nvar original_user_query = workflowContext.trigger.outputs.body.prompt\r\n\r\nvar messages = [];\r\nmessages.push({role: \"system\", message: system_message});\r\nfor (var i=0; i<samples.length; i++)\r\n{\r\n    messages.push(samples[i]);\r\n}\r\n\r\nvar user_message = \"Generate search query for: \" + original_user_query;\r\nmessages.push({ role: \"user\", message: user_message});\r\n\r\nreturn messages;\r\n"
        },
        "runAfter": {
          "system_message_for_search_query": [
            "SUCCEEDED"
          ]
        }
      },
      "get_search_query": {
        "type": "ServiceProvider",
        "inputs": {
          "parameters": {
            "deploymentId": "@parameters('openai_chat_deployment_model')",
            "messages": "@outputs('Execute_JavaScript_Code')",
            "temperature": 1
          },
          "serviceProviderConfiguration": {
            "connectionName": "openai",
            "operationId": "getChatCompletions",
            "serviceProviderId": "/serviceProviders/openai"
          }
        },
        "runAfter": {
          "Execute_JavaScript_Code": [
            "SUCCEEDED"
          ]
        }
      },
      "Get_an_embedding": {
        "type": "ServiceProvider",
        "inputs": {
          "parameters": {
            "deploymentId": "@parameters('openai_embedding_deployment_model')",
            "input": "@body('get_search_query')?['content']"
          },
          "serviceProviderConfiguration": {
            "connectionName": "openai",
            "operationId": "getSingleEmbedding",
            "serviceProviderId": "/serviceProviders/openai"
          }
        },
        "runAfter": {
          "get_search_query": [
            "SUCCEEDED"
          ]
        }
      },
      "Vector_search": {
        "type": "ServiceProvider",
        "inputs": {
          "parameters": {
            "indexName": "@parameters('aisearch_index_name')",
            "searchVector": {
              "fieldName": "embeddings",
              "vector": "@body('Get_an_embedding')['embedding']"
            },
            "kNearestNeighbors": 3
          },
          "serviceProviderConfiguration": {
            "connectionName": "azureaisearch",
            "operationId": "vectorSearch",
            "serviceProviderId": "/serviceProviders/azureaisearch"
          }
        },
        "runAfter": {
          "Get_an_embedding": [
            "SUCCEEDED"
          ]
        }
      },
      "create_prompt": {
        "type": "JavaScriptCode",
        "inputs": {
          "code": "var search_results = workflowContext.actions.Vector_Search.outputs.body;\r\nvar system_message = workflowContext.actions.system_message.outputs;\r\n\r\nvar sources = \"\"\r\nfor (let i=0;i<search_results.length;i++)\r\n{\r\n    sources = sources + \"\\n\" + search_results[i]['id'] +\":\" + search_results[i]['content']\r\n}\r\n\r\nvar system_message = system_message + \"\\n\" + \"Sources: \\n\" + sources\r\n\r\nreturn system_message"
        },
        "runAfter": {
          "Vector_search": [
            "SUCCEEDED"
          ]
        }
      },
      "Get_chat_completions": {
        "type": "ServiceProvider",
        "inputs": {
          "parameters": {
            "deploymentId": "@parameters('openai_chat_deployment_model')",
            "messages": [
              {
                "message": "@outputs('create_prompt')",
                "role": "system"
              },
              {
                "message": "@triggerBody()?['prompt']",
                "role": "user"
              }
            ],
            "temperature": 1
          },
          "serviceProviderConfiguration": {
            "connectionName": "openai",
            "operationId": "getChatCompletions",
            "serviceProviderId": "/serviceProviders/openai"
          }
        },
        "runAfter": {
          "create_prompt": [
            "SUCCEEDED"
          ]
        }
      },
      "Response": {
        "type": "Response",
        "kind": "Http",
        "inputs": {
          "statusCode": 200,
          "body": "@body('Get_chat_completions')?['content']"
        },
        "runAfter": {
          "Get_chat_completions": [
            "SUCCEEDED"
          ]
        }
      }
    },
    "contentVersion": "1.0.0.0",
    "outputs": {},
    "triggers": {
      "When_a_HTTP_request_is_received": {
        "type": "Request",
        "kind": "Http",
        "inputs": {
          "schema": {
            "properties": {
              "prompt": {
                "type": "string"
              }
            },
            "type": "object"
          }
        }
      }
    }
  },
  "kind": "Stateful"
}