{
    "id": "/providers/Microsoft.Logic/galleries/public/templates/616a6c6ec1ee4deba2923d0111dc66e5",
    "type": "Microsoft.Logic/galleries/templates",
    "name": "616a6c6ec1ee4deba2923d0111dc66e5",
    "properties": {
        "author": {
            "displayName": "Microsoft"
        },
        "categoryNames": [
            "enterprise_integration"
         ],
        "description": "Encode RosettaNet message,send to partner, wait/reconcile response from partner as per the PIP",
        "displayName": "Encode RosettaNet message and send to partner, wait/reconcile response from partner as per the PIP",
        "definition": {
         "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {}
              }
            }
          },
          "actions": {
            "Condition": {
              "actions": {
                "Create_blob": {
                  "runAfter": {},
                  "type": "ApiConnection",
                  "inputs": {
                    "body": "@outputs('RosettaNet_wait_for_response')?['body']?['notificationOfFailure']",
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['azureblob']['connectionId']"
                      }
                    },
                    "method": "post",
                    "path": "",
                    "queries": {
                      "folderPath": "/rosettanet",
                      "name": "NotOfFailure.txt",
                      "queryParametersSingleEncoded": true
                    }
                  },
                  "runtimeConfiguration": {
                    "contentTransfer": {
                      "transferMode": "Chunked"
                    }
                  }
                }
              },
              "runAfter": {
                "Until": [
                  "Succeeded"
                ]
              },
              "expression": {
                "and": [
                  {
                    "equals": [
                      "@outputs('RosettaNet_wait_for_response')?['body']?['notificationOfFailure']",
                      "@null"
                    ]
                  }
                ]
              },
              "type": "If"
            },
            "Until": {
              "actions": {
                "HTTP": {
                  "runAfter": {
                    "RosettaNet_Encode": [
                      "Succeeded"
                    ]
                  },
                  "type": "Http",
                  "inputs": {
                    "body": "@outputs('RosettaNet_Encode')?['body']?['messageContent']",
                    "headers": "@outputs('RosettaNet_Encode')?['body']?['messageHeaders']",
                    "method": "POST",
                    "uri": "[parameters('HTTP-URI')]"
                  }
                },
                "RosettaNet_Encode": {
                  "runAfter": {},
                  "type": "RosettaNetEncode",
                  "inputs": {
                    "guestPartnerName": "Contoso",
                    "homeRole": "Initiator",
                    "hostPartnerName": "@triggerOutputs()['Headers']['host']",
                    "messageToEncode": "@triggerBody()",
                    "messageType": "Action",
                    "processConfigurationCode": "3A4",
                    "processConfigurationInstanceIdentity": "@guid()",
                    "processConfigurationVersion": "v02.02.00"
                  }
                },
                "RosettaNet_wait_for_response": {
                  "runAfter": {
                    "HTTP": [
                      "Succeeded"
                    ]
                  },
                  "type": "RosettaNetWaitForResponse",
                  "inputs": {
                    "homeRole": "Initiator",
                    "processInstanceIdentity": "@triggerBody()",
                    "retryCount": "@iterationIndexes('Until')",
                    "serviceContent": "@triggerBody()"
                  }
                }
              },
              "runAfter": {},
              "expression": "@not(equals(outputs('RosettaNet_wait_for_response')?['body']?['waitForResponseResult'], 'retryable'))",
              "limit": {
                "count": 60,
                "timeout": "PT1H"
              },
              "type": "Until"
            }
          },
          "outputs": {}
        },
        "connectionReferences": {
            "azureblob": {
			"connection": {
				"id": ""
			},
			"api": {
				"id": "/subscriptions/{0}/providers/Microsoft.Web/locations/{1}/managedApis/azureblob"
			}
        }
        },
        "apiSummaries": [
            {
                "type": "RosettaNetEncode",
                "displayName": "RosettaNet Encode",
                "iconUri": "https://latemplateartifacts.blob.core.windows.net/rosettanet/rosetta-net-connector-100.png",
                "brandColor": "#804998"
            },
            {
                "type": "http",
                "displayName": "${Resources.HTTP_DISPLAYNAME}",
                "iconUri": "${Images.HttpIcon}",
                "brandColor": "#709727"
            },
            {
                "type": "apiconnection",
                "displayName": "${Resources.AZURE_BLOB_DISPLAYNAME}",
                "iconUri": "https://az818438.vo.msecnd.net/icons/azureblob.png",
                "brandColor": "#804998"
            }
            
         ],
        "changedTime": "2000-01-01T00:00:00.000Z",
        "createdTime": "2000-01-01T00:00:00.000Z",
        "popularity": 99
    }
}
