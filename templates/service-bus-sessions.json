{
  "id": "/providers/Microsoft.Logic/galleries/public/templates/6FA1A2D5-6F25-4074-8CE8-C843161E787E",
  "type": "Microsoft.Logic/galleries/templates",
  "name": "6FA1A2D5-6F25-4074-8CE8-C843161E787E",
  "properties": {
    "author": {
      "displayName": "Microsoft"
    },
    "categoryNames": [
      "Enterprise Integration"
    ],
    "description": "${Resources.TEMPLATE_SERVICEBUS_SESSIONS_DESCRIPTION}",
    "displayName": "${Resources.TEMPLATE_SERVICEBUS_SESSIONS_DISPLAYNAME}",
    "galleryName": "public",
    "summary": "",
    "definition": {
      "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
      "actions": {
        "Catch": {
          "actions": {
            "Close_the_session_in_the_queue_and_fail": {
              "description": "This must *always* be done or the session lock will be left open and throughput on the queue will drop dramatically. So, 'Configure Run After' is set so this action is always executed.",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['servicebus']['connectionId']"
                  }
                },
                "method": "delete",
                "path": "/@{encodeURIComponent(encodeURIComponent('foo'))}/sessions/@{encodeURIComponent(triggerBody()?['SessionId'])}/close"
              },
              "runAfter": {},
              "type": "ApiConnection"
            },
            "Find_failure_msg_from_'Try'_block": {
              "inputs": {
                "from": "@Result('Try')",
                "where": "@equals(item()['status'], 'Failed')"
              },
              "runAfter": {
                "Close_the_session_in_the_queue_and_fail": [
                  "Succeeded"
                ]
              },
              "type": "Query"
            },
            "Select_error_details": {
              "inputs": {
                "from": "@body('Find_failure_msg_from_''Try''_block')[0]['outputs']",
                "select": {
                  "action": "@item()['name']",
                  "errorResult": "@item()"
                }
              },
              "runAfter": {
                "Find_failure_msg_from_'Try'_block": [
                  "Succeeded"
                ]
              },
              "type": "Select"
            },
            "Terminate": {
              "description": "This Failure Termination only runs if the Close Session upon Failure action runs - otherwise the LA will be terminated as Success",
              "inputs": {
                "runError": {
                  "code": "",
                  "message": "There was an error processing messages for Session ID @{triggerBody()?['SessionId']}. The following error(s) occurred: @{body('Select_error_details')['errorResult']}"
                },
                "runStatus": "Failed"
              },
              "runAfter": {
                "Select_error_details": [
                  "Succeeded"
                ]
              },
              "type": "Terminate"
            }
          },
          "description": "If processing goes awry, we still need to close the session but let's terminate the Logic App with Failure and a message as to which session had problems",
          "runAfter": {
            "Try": [
              "Failed",
              "Skipped",
              "TimedOut"
            ]
          },
          "type": "Scope"
        },
        "Init_isDone": {
          "inputs": {
            "variables": [
              {
                "name": "isDone",
                "type": "Boolean",
                "value": "@false"
              }
            ]
          },
          "runAfter": {},
          "type": "InitializeVariable"
        },
        "Try": {
          "actions": {
            "Abandon_initial_message_from_the_queue": {
              "description": "If something goes wrong processing the message, we must abandon it to release it for pickup by another run",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['servicebus']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/@{encodeURIComponent('')}/messages/abandon",
                "queries": {
                  "lockToken": "@triggerBody()?['LockToken']",
                  "queueType": "Main",
                  "sessionId": "@triggerBody()?['SessionId']"
                }
              },
              "runAfter": {
                "Send_initial_message_to_topic": [
                  "Failed",
                  "Skipped",
                  "TimedOut"
                ]
              },
              "type": "ApiConnection"
            },
            "Close_a_session_in_a_queue_and_succeed": {
              "description": "If this is hit and executed, the next close session & terminate actions won't be hit because of their Configure Run After settings",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['servicebus']['connectionId']"
                  }
                },
                "method": "delete",
                "path": "//sessions/@{encodeURIComponent(triggerBody()?['SessionId'])}/close"
              },
              "runAfter": {
                "Abandon_initial_message_from_the_queue": [
                  "Succeeded",
                  "Skipped"
                ],
                "Renew_session_lock_until_cancelled": [
                  "Skipped",
                  "Succeeded"
                ],
                "Set_isDone_=_true": [
                  "Succeeded",
                  "Skipped"
                ]
              },
              "type": "ApiConnection"
            },
            "Complete_initial_message_in_queue": {
              "description": "Do not remove this step - message must be completed in order to be removed from the queue if you're using the above step as your work for the retrieved SB message",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['servicebus']['connectionId']"
                  }
                },
                "method": "delete",
                "path": "/@{encodeURIComponent('')}/messages/complete",
                "queries": {
                  "lockToken": "@{triggerBody()?['LockToken']}",
                  "queueType": "Main",
                  "sessionId": "@{triggerBody()?['SessionId']}"
                }
              },
              "runAfter": {
                "Send_initial_message_to_topic": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection"
            },
            "Renew_session_lock_until_cancelled": {
              "actions": {
                "Condition": {
                  "actions": {
                    "Renew_lock_on_the_session_in_a_queue": {
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['servicebus']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "//sessions/@{encodeURIComponent(triggerBody()?['SessionId'])}/renewlock"
                      },
                      "runAfter": {},
                      "type": "ApiConnection"
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "not": {
                          "equals": [
                            "@variables('isDone')",
                            "@true"
                          ]
                        }
                      }
                    ]
                  },
                  "runAfter": {
                    "Delay_25_seconds": [
                      "Succeeded"
                    ]
                  },
                  "type": "If"
                },
                "Delay_25_seconds": {
                  "description": "This delay should be shorter than the lock timeout duration of the queue being processed. Since 30s is the smallest lock duration, this value will suffice for any queue, but you can optimize the # of times this loop is run but adjusting accordingly",
                  "inputs": {
                    "interval": {
                      "count": 25,
                      "unit": "Second"
                    }
                  },
                  "runAfter": {},
                  "type": "Wait"
                }
              },
              "description": "This block ensures the session lock remains held by this Logic App for 1 hour or as long as it finds messages in the queue for the session, whichever comes first. To hold longer, change the 'Timeout' property of this Until block",
              "expression": "@equals(variables('isDone'), true)",
              "limit": {
                "timeout": "PT1H"
              },
              "runAfter": {
                "Complete_initial_message_in_queue": [
                  "Succeeded"
                ]
              },
              "type": "Until"
            },
            "Send_initial_message_to_topic": {
              "description": "This action can be anything - it's basically whatever you want to do with the messages that come in for the session.",
              "inputs": {
                "body": {
                  "ContentData": "@{triggerBody()?['ContentData']}",
                  "ContentType": "@{triggerBody()?['ContentType']}",
                  "Properties": "@triggerBody()?['Properties']",
                  "SessionId": "@{triggerBody()?['SessionId']}"
                },
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['servicebus']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/@{encodeURIComponent(triggerBody()?['SessionId'],'-topic')}/messages",
                "queries": {
                  "systemProperties": "None"
                }
              },
              "runAfter": {},
              "type": "ApiConnection"
            },
            "Set_isDone_=_true": {
              "description": "When the additional messages loop terminates - for any reason - we flag the isDone semaphore so the Logic App stops renewing the lock on the session.",
              "inputs": {
                "name": "isDone",
                "value": "@true"
              },
              "runAfter": {
                "While_there_are_more_messages_for_the_session_in_the_queue": [
                  "Succeeded",
                  "Failed",
                  "Skipped",
                  "TimedOut"
                ]
              },
              "type": "SetVariable"
            },
            "While_there_are_more_messages_for_the_session_in_the_queue": {
              "actions": {
                "Get_additional_messages_from_session": {
                  "description": "The max # of messages is 175, impacted by the size of the messages and the max message size property of the Service Bus (256k for Standard, 1mb for Premium)",
                  "inputs": {
                    "host": {
                      "connection": {
                        "name": "@parameters('$connections')['servicebus']['connectionId']"
                      }
                    },
                    "method": "get",
                    "path": "//messages/batch/peek",
                    "queries": {
                      "maxMessageCount": 175,
                      "queueType": "Main",
                      "sessionId": "@triggerBody()?['SessionId']"
                    }
                  },
                  "runAfter": {},
                  "type": "ApiConnection"
                },
                "Process_messages_if_we_got_any": {
                  "actions": {
                    "Set_isDone_=_true_because_no_messages_left": {
                      "inputs": {
                        "name": "isDone",
                        "value": "@true"
                      },
                      "runAfter": {},
                      "type": "SetVariable"
                    }
                  },
                  "description": "Check the number of messages we got back and, if it was 0, flip the cancel flag otherwise process them",
                  "else": {
                    "actions": {
                      "For_each_additional_message_received": {
                        "actions": {
                          "Abandon_the_message_in_a_queue": {
                            "description": "If something goes wrong processing the message, we must abandon it to release it for pickup by another run",
                            "inputs": {
                              "host": {
                                "connection": {
                                  "name": "@parameters('$connections')['servicebus']['connectionId']"
                                }
                              },
                              "method": "post",
                              "path": "/@{encodeURIComponent('')}/messages/abandon",
                              "queries": {
                                "lockToken": "@items('For_each_additional_message_received')?['LockToken']",
                                "queueType": "Main",
                                "sessionId": "@items('For_each_additional_message_received')?['SessionId']"
                              }
                            },
                            "runAfter": {
                              "Send_message_to_topic": [
                                "Failed",
                                "TimedOut",
                                "Skipped"
                              ]
                            },
                            "type": "ApiConnection"
                          },
                          "Complete_the_message_in_a_queue": {
                            "description": "Do not remove this step - message must be completed in order to be removed from the queue",
                            "inputs": {
                              "host": {
                                "connection": {
                                  "name": "@parameters('$connections')['servicebus']['connectionId']"
                                }
                              },
                              "method": "delete",
                              "path": "/@{encodeURIComponent('')}/messages/complete",
                              "queries": {
                                "lockToken": "@items('For_each_additional_message_received')?['LockToken']",
                                "queueType": "Main",
                                "sessionId": "@items('For_each_additional_message_received')?['SessionId']"
                              }
                            },
                            "runAfter": {
                              "Send_message_to_topic": [
                                "Succeeded"
                              ]
                            },
                            "type": "ApiConnection"
                          },
                          "Send_message_to_topic": {
                            "description": "This action can be anything - it's basically whatever you want to do with the messages that come in for the session.",
                            "inputs": {
                              "body": {
                                "ContentData": "@{items('For_each_additional_message_received')?['ContentData']}",
                                "ContentType": "@items('For_each_additional_message_received')?['ContentType']",
                                "Properties": "@items('For_each_additional_message_received')?['Properties']",
                                "SessionId": "@items('For_each_additional_message_received')?['SessionId']"
                              },
                              "host": {
                                "connection": {
                                  "name": "@parameters('$connections')['servicebus']['connectionId']"
                                }
                              },
                              "method": "post",
                              "path": "/@{encodeURIComponent(encodeURIComponent(items('For_each_additional_message_received')?['SessionId'],'-topic'))}/messages",
                              "queries": {
                                "systemProperties": "None"
                              }
                            },
                            "runAfter": {},
                            "type": "ApiConnection"
                          }
                        },
                        "description": "So messages are process in FIFO order, Concurrency Control (Setting menu of this action) is turned on and set to 1. This ensures only one message for the session is processed at a time. ",
                        "foreach": "@body('Get_additional_messages_from_session')",
                        "runAfter": {},
                        "runtimeConfiguration": {
                          "concurrency": {
                            "repetitions": 1
                          }
                        },
                        "type": "Foreach"
                      }
                    }
                  },
                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@length(body('Get_additional_messages_from_session'))",
                          0
                        ]
                      }
                    ]
                  },
                  "runAfter": {
                    "Get_additional_messages_from_session": [
                      "Succeeded"
                    ]
                  },
                  "type": "If"
                },
                "Set_isDone_=_true_on_failure_to_read_messages": {
                  "description": "If we fail to get additional messages from the queue for any reason, set isDone = true so the loop terminates",
                  "inputs": {
                    "name": "isDone",
                    "value": "@true"
                  },
                  "runAfter": {
                    "Get_additional_messages_from_session": [
                      "Failed",
                      "Skipped",
                      "TimedOut"
                    ]
                  },
                  "type": "SetVariable"
                }
              },
              "description": "This block keeps asking for more messages in the session for 1 hour or as long as it finds messages in the queue for the session, whichever comes first. To hold longer, change the 'Timeout' property of this Until block",
              "expression": "@not(equals(variables('isDone'), true))",
              "limit": {
                "timeout": "PT1H"
              },
              "runAfter": {
                "Complete_initial_message_in_queue": [
                  "Succeeded"
                ]
              },
              "type": "Until"
            }
          },
          "description": "Follow the Try/Catch pattern using Scopes to process messages in a Try block but appropriately handle errors with a Catch block",
          "runAfter": {
            "Init_isDone": [
              "Succeeded"
            ]
          },
          "type": "Scope"
        }
      },
      "contentVersion": "1.0.0.0",
      "outputs": {},
      "parameters": {
        "$connections": {
          "defaultValue": {},
          "type": "Object"
        }
      },
      "triggers": {
        "When_a_message_is_received_in_a_queue_(peek-lock)": {
          "inputs": {
            "host": {
              "connection": {
                "name": "@parameters('$connections')['servicebus']['connectionId']"
              }
            },
            "method": "get",
            "path": "/@{encodeURIComponent('')}/messages/head/peek",
            "queries": {
              "queueType": "Main",
              "sessionId": "Next Available"
            }
          },
          "recurrence": {
            "frequency": "Minute",
            "interval": 3
          },
          "type": "ApiConnection"
        }
      }
    },
    "connectionReferences": {
      "servicebus": {
        "connection": {
          "id": ""
        },
        "api": {
          "id": "/subscriptions/{0}/providers/Microsoft.Web/locations/{1}/managedApis/servicebus"
        }
      }
    },
    "apiSummaries": [
      {
        "type": "apiconnection",
        "displayName": "${Resources.SERVICEBUS}",
        "iconUri": "https://connectoricons-prod.azureedge.net/servicebus/icon_1.0.1019.1195.png",
        "brandColor": "#59B4D9"
      },
      {
        "type": "apiconnection",
        "displayName": "${Resources.SERVICEBUS}",
        "iconUri": "https://connectoricons-prod.azureedge.net/servicebus/icon_1.0.1019.1195.png",
        "brandColor": "#59B4D9"
      }
    ],
    "changedTime": "2020-01-21T00:00:59.000Z",
    "createdTime": "2017-04-04T00:00:59.000Z",
    "popularity": 3
  }
}